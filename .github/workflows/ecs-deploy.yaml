name: Deploy to ECS 
on:
    push:
      branches:
        deploy
    workflow_dispatch:
jobs:
   builddeploytoecs:
      runs-on: ubuntu-latest
      permissions:
        contents: read 
        packages: write  
      steps:
        ### clone the code from the runner 
        - name: checkout code from repo 
          uses: actions/checkout@v3
        ### setup java and maven 
        - name: setup java and maven environment    
          uses: actions/setup-java@v3
          with:
            distribution: 'adopt'
            java-version: '11'  
        ### use maven to package artifact, when these step executes the artifact should be created. 
        - name: package with maven 
          run: mvn package 
        ### use sonarqube to do code analysis. Ensure that you have a sonarqube server running and you've created a project. 
        - name: code analysis with sonarqube
          run: mvn sonar:sonar -Dsonar.projectKey=xashy-webapp -Dsonar.host.url=${{secrets.SONAR_HOST_URL}} -Dsonar.token=${{secrets.SONAR_LOGIN_TOKEN}}
        ## Upload to github packages and ensure that you update the pom.xml at the level of distrubution management.
        - name: Upload to github packages
          run: mvn --batch-mode deploy
          env:
            GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        ## set up authenticate to aws. make sure you create a secret for accesskey, secretkey and region
        - name: authenticate to aws account
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
            aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
            aws-region: ${{secrets.AWS_REGION}}
        ## this steps permits github actions to login to ecr 
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1 
        ###  conatainerise artifact with maven , tag and push to ecr repo. 
        - name: Build, tag and push 
          id: build-image
          env:
            REGISTRY: ${{steps.login-ecr.outputs.registry}}
            REPOSITORY: ecsdeploy
            IMAGE_TAG: ${{github.sha}}
          run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 
            echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            ## github action should create a new task definition revision

        # - name: Fill in the new image ID in the Amazon ECS task definition
        #   id: task-def
        #   uses: aws-actions/amazon-ecs-render-task-definition@v1
        #   with:
        #       task-definition: task-definition.json
        #       container-name: xashy-webapp
        #       image: ${{ steps.build-image.outputs.image }}
              
        # ### github action should update the service with the lastes task-definition revision. Makue sure you change the name of the cluster and service name 
        # - name: Deploy Amazon ECS task definition
        #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        #   with:
        #     task-definition: ${{ steps.task-def.outputs.task-definition }}
        #     service: xashywebapp-service
        #     cluster: Xashy-web-apps-Cluster
        #     wait-for-service-stability: true
            
            

            


        

        